{"version":3,"sources":["Components/Login.js","Components/AnonymousUser.js","Components/CreateCustomer.js","Components/CreateAirlineCompany.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["Login","state","username","password","flightId","componentDidMount","console","log","props","location","search","localStorage","clear","split","setState","handleOnChange","e","target","id","value","handleOnClick","Axios","post","then","result","userInfo","JSON","parse","data","status","setItem","getItem","type","window","href","catch","error","response","Swal","fire","className","onChange","this","onClick","to","Component","AnonymousUser","CreateCustomer","inputCSS","width","method","action","name","style","history","back","CreateAirlineCompany","countryList","get","countryListHtml","map","c","key","ID","CountryName","marginTop","marginRight","marginLeft","defaultValue","disabled","App","exact","path","component","Boolean","hostname","match","initState","posts","firstInit","rootReducer","postStore","createStore","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f4736ec4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport Axios from 'axios';\r\nimport Swal from 'sweetalert2';\r\n\r\nclass Login extends Component{\r\n\r\n    state = {\r\n        username: \"\",\r\n        password: \"\",\r\n        flightId : -1\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        console.log(this.props.location.search)\r\n        console.log(\"clearing local storage...\")\r\n        localStorage.clear()\r\n        console.log(\"local storage cleared!\")\r\n        console.log(\"!_!_!_!_!_!_!\")\r\n        console.log(this.props.location.search.split('=')[1])\r\n        if(this.props.location.search.split('=')[1] != null){\r\n        this.setState({\r\n            flightId : this.props.location.search.split('=')[1]\r\n        })\r\n    }\r\n    }\r\n\r\n    handleOnChange = (e) => {\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n        \r\n    }\r\n\r\n    handleOnClick = (e) => {\r\n        //would need switch case or ifs in case i have more than 1 button\r\n\r\n        //need the result to have more info about the user\r\n        Axios.post(\"http://localhost:9002/api/login/login\" + this.props.location.search, {username: this.state.username, password: this.state.password}).then((result) => {\r\n            // console.log(1)    \r\n            // console.log(result)\r\n            // console.log(2)    \r\n            // console.log(result.data)\r\n            // console.log(3)    \r\n            // console.log(JSON.parse(result.data))\r\n            // console.log(4)\r\n            const userInfo = JSON.parse(result.data);\r\n            console.log(userInfo)\r\n            //console.log(result.data.type) //nothing......\r\n            \r\n            if(result.status == 200){\r\n                localStorage.setItem(\"userInfo\", result.data); //put this line before getting the info on the next pages because it doesn't work in different ports\r\n                //console.log(\"user info: \" + localStorage.getItem(\"userInfo\")) \r\n                console.log(localStorage.getItem(\"userInfo\"))\r\n                //entered as one of the customers\r\n                if(userInfo.type == \"Customer\"){\r\n                    if(this.state.flightId != -1){\r\n                        window.location.href = \"http://localhost:3000/buyticket?flightId=\" + this.state.flightId //LINK TO THE TICKET BUY PAGE\r\n                    }\r\n                    else{\r\n                        window.location.href = 'http://localhost:3000/';\r\n                    }\r\n                         \r\n                    \r\n\r\n                    //alert(\"you logged in as one of the customers!\")\r\n                }\r\n                //entered as one of the airline companies\r\n                if(userInfo.type == \"Airline\"){\r\n                    \r\n                    window.location.href = 'http://localhost:3003/';\r\n\r\n                    //alert(\"you logged in as one of the airline companies!\")\r\n                }\r\n                //entered as one of the admins\r\n                if(userInfo.type == \"Admin\"){\r\n                    //window.history.back() <--back button - pretty neat\r\n                    \r\n                    window.location.href = 'http://localhost:3002/';\r\n\r\n                    //alert(\"you logged in as one of the admins!\")\r\n                }\r\n            }\r\n        }).catch((error) => {\r\n            if(error.response.status == 401){\r\n            //alert(\"Wrong Username or Password!\")\r\n            Swal.fire(\"Wrong Username or Password!\", \"\", \"error\")\r\n            }\r\n            else{\r\n                console.log(error)\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    render()\r\n    {\r\n        const ticketPurchaseMessage = () => {\r\n            if(this.props.location.search != \"\"){\r\n                return(\r\n                    <div>\r\n                        <b className=\"red\"><u>To purchase a ticket, please login as a customer.</u></b>\r\n                    </div>\r\n                )\r\n            }\r\n            else{\r\n                return(\r\n                    <div>\r\n\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n\r\n        return(\r\n            \r\n            <div className=\"login\">\r\n\r\n                {ticketPurchaseMessage()} <br/>\r\n                {/* for debug purposes: <br/>\r\n                 <b>\r\n                 customer: crazyswan425 madcat (IS DEAD)<br/>\r\n                 airline: beautifulgorilla981 logan2 <br/>\r\n                 admin: admin 9999\r\n                 </b> */}\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col m4 offset-m4\">\r\n                    <div className=\"card blue darken-4 round\">\r\n                        <div className=\"card-content white-text\">\r\n                        <span className=\"card-title\">Login</span>\r\n                        Username: <br/>\r\n                        <input className=\"col m8 offset-m2 white-text\" type=\"text\" id=\"username\" onChange={this.handleOnChange}></input> <br/>\r\n                        <br/> <br/> Password: <br/>\r\n                        <input className=\"col m8 offset-m2 white-text\" type=\"password\" id=\"password\" onChange={this.handleOnChange}></input> <br/> \r\n                        <br/><br/> <button className=\"btn pink darken-3\" onClick={this.handleOnClick}>Login</button> <br/> <br/>\r\n\r\n                        Don't have a user? <br/>\r\n                        <NavLink to='/AnonymousUser'>Enter as an anonymous user</NavLink> <br/>\r\n                        or sign up as: <br/>\r\n                        <NavLink to='/CreateCustomer'> Customer</NavLink>\r\n                        / \r\n                        <NavLink to='/CreateAirlineCompany'>Airline Company</NavLink>\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n            \r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Login","import React, { Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nclass AnonymousUser extends Component{\r\n\r\n    render()\r\n    {\r\n\r\n        return(\r\n            <div>\r\n                \r\n                <nav>\r\n                    <div className=\"nav-wrapper\">\r\n                    <h6  className=\"brand-logo\">Flight Center</h6>\r\n                    <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n                        {/* <li><NavLink to=\"/Page/SearchFlights\">Search Flights</NavLink></li> */} {/* is this how i connect to the razors from here?*/}\r\n                        <li><a href=\"http://localhost:9002/page/searchflights\">Search Flights</a></li>\r\n                        <li><a href=\"http://localhost:9002/page/departingflights\">Departing Flights</a></li>\r\n                        <li><a href=\"http://localhost:9002/page/landingflights\">Landing Flights</a></li>\r\n                    </ul>\r\n                    <ul id=\"nav-mobile\" className=\"left hide-on-med-and-down\">\r\n                        <li className=\"blue\"><NavLink to=\"/\">Login</NavLink></li>\r\n                    </ul>\r\n                    </div>\r\n                </nav>\r\n        \r\n\r\n\r\n                <div className=\"left-align\">\r\n                \r\n                </div>\r\n\r\n                <h1>Anonymous User Page</h1>\r\n\r\n                To purchase tickets, please login.\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default AnonymousUser","import React, { Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nclass CreateCustomer extends Component{\r\n\r\n    state = {\r\n        inputCSS : {\r\n            width: 200\r\n        }\r\n    }\r\n\r\n    render()\r\n    {\r\n\r\n        return(\r\n            <div>\r\n                <div className=\"left-align\">\r\n                <NavLink to=\"/\">&larr; Back to login</NavLink>\r\n                </div>\r\n                <h1>Create a Customer</h1>\r\n                <form method=\"post\" action=\"http://localhost:9002/page/RequestAddingCustomer\">\r\n                Username: <input name=\"inputUsername\" type=\"text\" style={this.state.inputCSS}/> <br/>\r\n                Password: <input name=\"inputPassword\" type=\"password\" style={this.state.inputCSS}/> <br/>\r\n                First Name: <input name=\"inputFirstName\" type=\"text\" style={this.state.inputCSS}/> <br/>\r\n                Last Name: <input  name=\"inputLastName\"type=\"text\" style={this.state.inputCSS}/> <br/>\r\n                Email Address: <input name=\"inputEmail\" type=\"text\" style={this.state.inputCSS}/><br/>\r\n                Phone Number: <input name=\"inputPhoneNo\" type=\"text\" style={this.state.inputCSS}/><br/>\r\n                Credit Card Number: <input name=\"inputCreditCard\" type=\"text\" style={this.state.inputCSS}/><br/>\r\n\r\n                {// for some reason select won't work with materialize\r\n                }\r\n\r\n                <br/><button className=\"btn\">Submit</button>\r\n                </form>\r\n                <br/>\r\n                <button className=\"btn\" onClick={() => {window.history.back()}}>Back</button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default CreateCustomer","import React, { Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport Axios from 'axios';\r\n\r\nclass CreateAirlineCompany extends Component{\r\n    state = {\r\n        countryList : [], \r\n        inputCSS : {  //or import this page's css - CreateAirlineCompany.css - gotta create it\r\n            width: 200\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        Axios.get(\"http://localhost:9002/api/anonymousfacade/getallcountries\").then((result) => {\r\n            //console.log(result.data)\r\n            //preparing the countries for the select/drop-down field\r\n            this.setState({\r\n                countryList : result.data\r\n            })\r\n            //console.log(this.state.countryList)\r\n        })\r\n    }\r\n    \r\n\r\n    render()\r\n    {\r\n        const countryListHtml = this.state.countryList.map(c => {return (\r\n                <option key={c.ID} value={c.ID}>{c.CountryName}</option>\r\n        )})\r\n\r\n        return(\r\n            <div>\r\n                <div className=\"left-align\">\r\n                <NavLink to=\"/\">&larr; Back to login</NavLink>\r\n                </div>\r\n                <h1>Create an Airline Company</h1>\r\n                <form method=\"post\" action=\"http://localhost:9002/page/RequestAddingAirline\">\r\n                Username: <input name=\"inputUsername\" type=\"text\" style={this.state.inputCSS}/> <br/>\r\n                Password: <input name=\"inputPassword\" type=\"password\" style={this.state.inputCSS}/> <br/>\r\n                Airline Name: <input name=\"inputAirlineName\" type=\"text\" style={this.state.inputCSS}/> <br/>\r\n\r\n\r\n                <div className=\"container\">\r\n                        <div className=\"row\" >\r\n                            <div className=\"col s3\" style={{marginTop:25,marginRight:-100,marginLeft:370}}>\r\n                                <span >Country Created:</span> \r\n                            </div>\r\n\r\n                            <div className=\"input-field col s2\" >\r\n                                <select name=\"inputCountryId\" className=\"browser-default\">\r\n                                    <option defaultValue=\"\" disabled>Choose your option</option>\r\n                                    {/*inserting all countries in here */}\r\n                                    {countryListHtml}\r\n                                </select>\r\n                            </div>\r\n                    </div>\r\n                </div>\r\n                <br/>\r\n\r\n                {// for some reason select won't work with materialize\r\n                }\r\n\r\n                <br/><button className=\"btn\">Submit</button>\r\n                \r\n                \r\n                </form>\r\n                <br/>\r\n                <button className=\"btn\" onClick={() => {window.history.back()}}>Back</button>\r\n\r\n                \r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default CreateAirlineCompany","import React, {Component} from 'react';\nimport './App.css';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Login from './Components/Login';\nimport AnonymousUser from './Components/AnonymousUser';\nimport CreateCustomer from './Components/CreateCustomer';\nimport CreateAirlineCompany from './Components/CreateAirlineCompany';\n\n\nclass App extends Component{\n  render(){\n\n  \n  return (\n    <div className=\"App\">\n\n                <BrowserRouter>\n                <Route exact path='/' component={Login}/>\n                <Route path='/AnonymousUser' component={AnonymousUser}/>\n                <Route path='/CreateCustomer' component={CreateCustomer}/>\n                <Route path='/CreateAirlineCompany' component={CreateAirlineCompany}/>\n                \n                </BrowserRouter>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {\r\n    posts: [],\r\n    firstInit: true\r\n  }\r\n  const rootReducer = (state = initState, action) => {\r\n    // console.log(action) // show in console\r\n    // // let's delete it from the state\r\n    // if (action.type == 'DELETE_POST') {\r\n    //   let new_posts = state.posts.filter(p => p.id != action.id)\r\n    //   return {\r\n    //     ...state,\r\n    //     posts: new_posts\r\n    //   }\r\n    // }\r\n    // else if (action.type == 'AJAX_POSTS') {\r\n    //   console.log(action.data)\r\n    //   if (state.firstInit) {\r\n    //     state.firstInit = false\r\n    //     return {\r\n    //       ...state,\r\n    //       posts: action.data\r\n    //     }\r\n    //   }\r\n    // }\r\n  \r\n    return state;\r\n  \r\n  };\r\n  \r\n  export default rootReducer  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers/rootReducer';\n\nconst postStore = createStore(rootReducer)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={postStore}><App /></Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}